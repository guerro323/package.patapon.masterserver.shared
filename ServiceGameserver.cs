// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Messages/service_gameserver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace P4TLB.MasterServer {

  /// <summary>Holder for reflection information generated from Messages/service_gameserver.proto</summary>
  public static partial class ServiceGameserverReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages/service_gameserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceGameserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFNZXNzYWdlcy9zZXJ2aWNlX2dhbWVzZXJ2ZXIucHJvdG8SElA0VExCLk1h",
            "c3RlclNlcnZlciJhChZDb25uZWN0aW9uVG9rZW5SZXF1ZXN0EhQKDGNsaWVu",
            "dF90b2tlbhgBIAEoCRIWCg5zZXJ2ZXJfdXNlcl9pZBgCIAEoBBIZChFzZXJ2",
            "ZXJfdXNlcl9sb2dpbhgDIAEoCSIwChdDb25uZWN0aW9uVG9rZW5SZXNwb25z",
            "ZRIVCg1jb25uZWN0X3Rva2VuGAEgASgJIlwKEUNvbm5lY3Rpb25SZXF1ZXN0",
            "EhQKDGNsaWVudF90b2tlbhgBIAEoCRIWCg5zZXJ2ZXJfdXNlcl9pZBgCIAEo",
            "BBIZChFzZXJ2ZXJfdXNlcl9sb2dpbhgDIAEoCSKJAgoSQ29ubmVjdGlvblJl",
            "c3BvbnNlEj8KBWVycm9yGAEgASgOMjAuUDRUTEIuTWFzdGVyU2VydmVyLkNv",
            "bm5lY3Rpb25SZXNwb25zZS5FcnJvckNvZGUSGQoRZW5kX3BvaW50X2FkZHJl",
            "c3MYAiABKAkSFgoOZW5kX3BvaW50X3BvcnQYAyABKAUSDwoHaXNfaXB2NhgE",
            "IAEoCBIVCg1jb25uZWN0X3Rva2VuGAUgASgJIlcKCUVycm9yQ29kZRIGCgJP",
            "SxAAEhAKDEludmFsaWRUb2tlbhABEhQKEFNlcnZlckFja1BlbmRpbmcQAhIa",
            "ChZOb0Nvbm5lY3Rpb25Ub2tlbkFza2VkEAMiOAogR2V0UGVuZGluZ0Nvbm5l",
            "Y3Rpb25Ub2tlblJlcXVlc3QSFAoMY2xpZW50X3Rva2VuGAEgASgJIrQCCiFH",
            "ZXRQZW5kaW5nQ29ubmVjdGlvblRva2VuUmVzcG9uc2USTgoFZXJyb3IYASAB",
            "KA4yPy5QNFRMQi5NYXN0ZXJTZXJ2ZXIuR2V0UGVuZGluZ0Nvbm5lY3Rpb25U",
            "b2tlblJlc3BvbnNlLkVycm9yQ29kZRJZCgRsaXN0GAIgAygLMksuUDRUTEIu",
            "TWFzdGVyU2VydmVyLkdldFBlbmRpbmdDb25uZWN0aW9uVG9rZW5SZXNwb25z",
            "ZS5DbGllbnRDb25uZWN0aW9uVG9rZW4aNwoVQ2xpZW50Q29ubmVjdGlvblRv",
            "a2VuEg0KBXRva2VuGAEgASgJEg8KB3VzZXJfaWQYAiABKAQiKwoJRXJyb3JD",
            "b2RlEgYKAk9LEAASFgoSSW52YWxpZENsaWVudFRva2VuEAEiTQoXQWNrbm93",
            "bGVkZ2VUb2tlblJlcXVlc3QSFAoMY2xpZW50X3Rva2VuGAEgASgJEhwKFGFj",
            "a25vd2xlZGdlZF91c2VyX2lkGAIgASgEIo4BChhBY2tub3dsZWRnZVRva2Vu",
            "UmVzcG9uc2USRQoFZXJyb3IYASABKA4yNi5QNFRMQi5NYXN0ZXJTZXJ2ZXIu",
            "QWNrbm93bGVkZ2VUb2tlblJlc3BvbnNlLkVycm9yQ29kZSIrCglFcnJvckNv",
            "ZGUSBgoCT0sQABIWChJJbnZhbGlkQ2xpZW50VG9rZW4QASJ8ChFTZXJ2ZXJJ",
            "bmZvcm1hdGlvbhIWCg5zZXJ2ZXJfdXNlcl9pZBgBIAEoBBIZChFzZXJ2ZXJf",
            "dXNlcl9sb2dpbhgCIAEoCRIMCgRuYW1lGAMgASgJEhIKCnNsb3RfY291bnQY",
            "BCABKAUSEgoKc2xvdF9saW1pdBgFIAEoBSJpChtTZXRTZXJ2ZXJJbmZvcm1h",
            "dGlvblJlcXVlc3QSFAoMY2xpZW50X3Rva2VuGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSEgoKc2xvdF9jb3VudBgDIAEoBRISCgpzbG90X2xpbWl0GAQgASgFIpYB",
            "ChxTZXRTZXJ2ZXJJbmZvcm1hdGlvblJlc3BvbnNlEkkKBWVycm9yGAEgASgO",
            "MjouUDRUTEIuTWFzdGVyU2VydmVyLlNldFNlcnZlckluZm9ybWF0aW9uUmVz",
            "cG9uc2UuRXJyb3JDb2RlIisKCUVycm9yQ29kZRIGCgJPSxAAEhYKEkludmFs",
            "aWRDbGllbnRUb2tlbhABIj8KEVNlcnZlckxpc3RSZXF1ZXN0EhQKDGNsaWVu",
            "dF90b2tlbhgBIAEoCRIUCgxxdWVyeV9zdHJpbmcYCiABKAkiTAoSU2VydmVy",
            "TGlzdFJlc3BvbnNlEjYKB3NlcnZlcnMYASADKAsyJS5QNFRMQi5NYXN0ZXJT",
            "ZXJ2ZXIuU2VydmVySW5mb3JtYXRpb24iYwoYU2VydmVySW5mb3JtYXRpb25S",
            "ZXF1ZXN0EhQKDGNsaWVudF90b2tlbhgBIAEoCRIWCg5zZXJ2ZXJfdXNlcl9p",
            "ZBgCIAEoBBIZChFzZXJ2ZXJfdXNlcl9sb2dpbhgDIAEoCSJXChlTZXJ2ZXJJ",
            "bmZvcm1hdGlvblJlc3BvbnNlEjoKC2luZm9ybWF0aW9uGAEgASgLMiUuUDRU",
            "TEIuTWFzdGVyU2VydmVyLlNlcnZlckluZm9ybWF0aW9uMq0GChFHYW1lU2Vy",
            "dmVyU2VydmljZRJtChJHZXRDb25uZWN0aW9uVG9rZW4SKi5QNFRMQi5NYXN0",
            "ZXJTZXJ2ZXIuQ29ubmVjdGlvblRva2VuUmVxdWVzdBorLlA0VExCLk1hc3Rl",
            "clNlcnZlci5Db25uZWN0aW9uVG9rZW5SZXNwb25zZRJbCgpUcnlDb25uZWN0",
            "EiUuUDRUTEIuTWFzdGVyU2VydmVyLkNvbm5lY3Rpb25SZXF1ZXN0GiYuUDRU",
            "TEIuTWFzdGVyU2VydmVyLkNvbm5lY3Rpb25SZXNwb25zZRKJAQoaR2V0UGVu",
            "ZGluZ0Nvbm5lY3Rpb25Ub2tlbnMSNC5QNFRMQi5NYXN0ZXJTZXJ2ZXIuR2V0",
            "UGVuZGluZ0Nvbm5lY3Rpb25Ub2tlblJlcXVlc3QaNS5QNFRMQi5NYXN0ZXJT",
            "ZXJ2ZXIuR2V0UGVuZGluZ0Nvbm5lY3Rpb25Ub2tlblJlc3BvbnNlEm0KEEFj",
            "a25vd2xlZGdlVG9rZW4SKy5QNFRMQi5NYXN0ZXJTZXJ2ZXIuQWNrbm93bGVk",
            "Z2VUb2tlblJlcXVlc3QaLC5QNFRMQi5NYXN0ZXJTZXJ2ZXIuQWNrbm93bGVk",
            "Z2VUb2tlblJlc3BvbnNlEnwKF1VwZGF0ZVNlcnZlckluZm9ybWF0aW9uEi8u",
            "UDRUTEIuTWFzdGVyU2VydmVyLlNldFNlcnZlckluZm9ybWF0aW9uUmVxdWVz",
            "dBowLlA0VExCLk1hc3RlclNlcnZlci5TZXRTZXJ2ZXJJbmZvcm1hdGlvblJl",
            "c3BvbnNlEl4KDUdldFNlcnZlckxpc3QSJS5QNFRMQi5NYXN0ZXJTZXJ2ZXIu",
            "U2VydmVyTGlzdFJlcXVlc3QaJi5QNFRMQi5NYXN0ZXJTZXJ2ZXIuU2VydmVy",
            "TGlzdFJlc3BvbnNlEnMKFEdldFNlcnZlckluZm9ybWF0aW9uEiwuUDRUTEIu",
            "TWFzdGVyU2VydmVyLlNlcnZlckluZm9ybWF0aW9uUmVxdWVzdBotLlA0VExC",
            "Lk1hc3RlclNlcnZlci5TZXJ2ZXJJbmZvcm1hdGlvblJlc3BvbnNlYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ConnectionTokenRequest), global::P4TLB.MasterServer.ConnectionTokenRequest.Parser, new[]{ "ClientToken", "ServerUserId", "ServerUserLogin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ConnectionTokenResponse), global::P4TLB.MasterServer.ConnectionTokenResponse.Parser, new[]{ "ConnectToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ConnectionRequest), global::P4TLB.MasterServer.ConnectionRequest.Parser, new[]{ "ClientToken", "ServerUserId", "ServerUserLogin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ConnectionResponse), global::P4TLB.MasterServer.ConnectionResponse.Parser, new[]{ "Error", "EndPointAddress", "EndPointPort", "IsIpv6", "ConnectToken" }, null, new[]{ typeof(global::P4TLB.MasterServer.ConnectionResponse.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest), global::P4TLB.MasterServer.GetPendingConnectionTokenRequest.Parser, new[]{ "ClientToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.GetPendingConnectionTokenResponse), global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Parser, new[]{ "Error", "List" }, null, new[]{ typeof(global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ErrorCode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken), global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken.Parser, new[]{ "Token", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.AcknowledgeTokenRequest), global::P4TLB.MasterServer.AcknowledgeTokenRequest.Parser, new[]{ "ClientToken", "AcknowledgedUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.AcknowledgeTokenResponse), global::P4TLB.MasterServer.AcknowledgeTokenResponse.Parser, new[]{ "Error" }, null, new[]{ typeof(global::P4TLB.MasterServer.AcknowledgeTokenResponse.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ServerInformation), global::P4TLB.MasterServer.ServerInformation.Parser, new[]{ "ServerUserId", "ServerUserLogin", "Name", "SlotCount", "SlotLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.SetServerInformationRequest), global::P4TLB.MasterServer.SetServerInformationRequest.Parser, new[]{ "ClientToken", "Name", "SlotCount", "SlotLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.SetServerInformationResponse), global::P4TLB.MasterServer.SetServerInformationResponse.Parser, new[]{ "Error" }, null, new[]{ typeof(global::P4TLB.MasterServer.SetServerInformationResponse.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ServerListRequest), global::P4TLB.MasterServer.ServerListRequest.Parser, new[]{ "ClientToken", "QueryString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ServerListResponse), global::P4TLB.MasterServer.ServerListResponse.Parser, new[]{ "Servers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ServerInformationRequest), global::P4TLB.MasterServer.ServerInformationRequest.Parser, new[]{ "ClientToken", "ServerUserId", "ServerUserLogin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P4TLB.MasterServer.ServerInformationResponse), global::P4TLB.MasterServer.ServerInformationResponse.Parser, new[]{ "Information" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConnectionTokenRequest : pb::IMessage<ConnectionTokenRequest> {
    private static readonly pb::MessageParser<ConnectionTokenRequest> _parser = new pb::MessageParser<ConnectionTokenRequest>(() => new ConnectionTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenRequest(ConnectionTokenRequest other) : this() {
      clientToken_ = other.clientToken_;
      serverUserId_ = other.serverUserId_;
      serverUserLogin_ = other.serverUserLogin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenRequest Clone() {
      return new ConnectionTokenRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_user_id" field.</summary>
    public const int ServerUserIdFieldNumber = 2;
    private ulong serverUserId_;
    /// <summary>
    /// if it's at 0, 'user_login' will be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerUserId {
      get { return serverUserId_; }
      set {
        serverUserId_ = value;
      }
    }

    /// <summary>Field number for the "server_user_login" field.</summary>
    public const int ServerUserLoginFieldNumber = 3;
    private string serverUserLogin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUserLogin {
      get { return serverUserLogin_; }
      set {
        serverUserLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (ServerUserId != other.ServerUserId) return false;
      if (ServerUserLogin != other.ServerUserLogin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (ServerUserId != 0UL) hash ^= ServerUserId.GetHashCode();
      if (ServerUserLogin.Length != 0) hash ^= ServerUserLogin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (ServerUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerUserLogin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (ServerUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUserLogin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.ServerUserId != 0UL) {
        ServerUserId = other.ServerUserId;
      }
      if (other.ServerUserLogin.Length != 0) {
        ServerUserLogin = other.ServerUserLogin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 16: {
            ServerUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            ServerUserLogin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionTokenResponse : pb::IMessage<ConnectionTokenResponse> {
    private static readonly pb::MessageParser<ConnectionTokenResponse> _parser = new pb::MessageParser<ConnectionTokenResponse>(() => new ConnectionTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenResponse(ConnectionTokenResponse other) : this() {
      connectToken_ = other.connectToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionTokenResponse Clone() {
      return new ConnectionTokenResponse(this);
    }

    /// <summary>Field number for the "connect_token" field.</summary>
    public const int ConnectTokenFieldNumber = 1;
    private string connectToken_ = "";
    /// <summary>
    /// Connection token until the gameserver decide to remove it, so be sure to connect as fast as possible!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectToken {
      get { return connectToken_; }
      set {
        connectToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectToken != other.ConnectToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectToken.Length != 0) hash ^= ConnectToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectToken.Length != 0) {
        ConnectToken = other.ConnectToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionRequest : pb::IMessage<ConnectionRequest> {
    private static readonly pb::MessageParser<ConnectionRequest> _parser = new pb::MessageParser<ConnectionRequest>(() => new ConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest(ConnectionRequest other) : this() {
      clientToken_ = other.clientToken_;
      serverUserId_ = other.serverUserId_;
      serverUserLogin_ = other.serverUserLogin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest Clone() {
      return new ConnectionRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_user_id" field.</summary>
    public const int ServerUserIdFieldNumber = 2;
    private ulong serverUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerUserId {
      get { return serverUserId_; }
      set {
        serverUserId_ = value;
      }
    }

    /// <summary>Field number for the "server_user_login" field.</summary>
    public const int ServerUserLoginFieldNumber = 3;
    private string serverUserLogin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUserLogin {
      get { return serverUserLogin_; }
      set {
        serverUserLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (ServerUserId != other.ServerUserId) return false;
      if (ServerUserLogin != other.ServerUserLogin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (ServerUserId != 0UL) hash ^= ServerUserId.GetHashCode();
      if (ServerUserLogin.Length != 0) hash ^= ServerUserLogin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (ServerUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerUserLogin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (ServerUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUserLogin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.ServerUserId != 0UL) {
        ServerUserId = other.ServerUserId;
      }
      if (other.ServerUserLogin.Length != 0) {
        ServerUserLogin = other.ServerUserLogin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 16: {
            ServerUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            ServerUserLogin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionResponse : pb::IMessage<ConnectionResponse> {
    private static readonly pb::MessageParser<ConnectionResponse> _parser = new pb::MessageParser<ConnectionResponse>(() => new ConnectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse(ConnectionResponse other) : this() {
      error_ = other.error_;
      endPointAddress_ = other.endPointAddress_;
      endPointPort_ = other.endPointPort_;
      isIpv6_ = other.isIpv6_;
      connectToken_ = other.connectToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse Clone() {
      return new ConnectionResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::P4TLB.MasterServer.ConnectionResponse.Types.ErrorCode error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::P4TLB.MasterServer.ConnectionResponse.Types.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "end_point_address" field.</summary>
    public const int EndPointAddressFieldNumber = 2;
    private string endPointAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndPointAddress {
      get { return endPointAddress_; }
      set {
        endPointAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_point_port" field.</summary>
    public const int EndPointPortFieldNumber = 3;
    private int endPointPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPointPort {
      get { return endPointPort_; }
      set {
        endPointPort_ = value;
      }
    }

    /// <summary>Field number for the "is_ipv6" field.</summary>
    public const int IsIpv6FieldNumber = 4;
    private bool isIpv6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIpv6 {
      get { return isIpv6_; }
      set {
        isIpv6_ = value;
      }
    }

    /// <summary>Field number for the "connect_token" field.</summary>
    public const int ConnectTokenFieldNumber = 5;
    private string connectToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectToken {
      get { return connectToken_; }
      set {
        connectToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (EndPointAddress != other.EndPointAddress) return false;
      if (EndPointPort != other.EndPointPort) return false;
      if (IsIpv6 != other.IsIpv6) return false;
      if (ConnectToken != other.ConnectToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      if (EndPointAddress.Length != 0) hash ^= EndPointAddress.GetHashCode();
      if (EndPointPort != 0) hash ^= EndPointPort.GetHashCode();
      if (IsIpv6 != false) hash ^= IsIpv6.GetHashCode();
      if (ConnectToken.Length != 0) hash ^= ConnectToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      if (EndPointAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndPointAddress);
      }
      if (EndPointPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndPointPort);
      }
      if (IsIpv6 != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsIpv6);
      }
      if (ConnectToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ConnectToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (EndPointAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndPointAddress);
      }
      if (EndPointPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPointPort);
      }
      if (IsIpv6 != false) {
        size += 1 + 1;
      }
      if (ConnectToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.EndPointAddress.Length != 0) {
        EndPointAddress = other.EndPointAddress;
      }
      if (other.EndPointPort != 0) {
        EndPointPort = other.EndPointPort;
      }
      if (other.IsIpv6 != false) {
        IsIpv6 = other.IsIpv6;
      }
      if (other.ConnectToken.Length != 0) {
        ConnectToken = other.ConnectToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Error = (global::P4TLB.MasterServer.ConnectionResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            EndPointAddress = input.ReadString();
            break;
          }
          case 24: {
            EndPointPort = input.ReadInt32();
            break;
          }
          case 32: {
            IsIpv6 = input.ReadBool();
            break;
          }
          case 42: {
            ConnectToken = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        /// <summary>
        /// Ok, we can connect.
        /// </summary>
        [pbr::OriginalName("OK")] Ok = 0,
        /// <summary>
        /// Our client token is invalid.
        /// </summary>
        [pbr::OriginalName("InvalidToken")] InvalidToken = 1,
        /// <summary>
        /// Is the server still waiting for our connection token to arrive?
        /// </summary>
        [pbr::OriginalName("ServerAckPending")] ServerAckPending = 2,
        /// <summary>
        /// The problem is client side, it didn't asked to get connection token
        /// </summary>
        [pbr::OriginalName("NoConnectionTokenAsked")] NoConnectionTokenAsked = 3,
      }

    }
    #endregion

  }

  public sealed partial class GetPendingConnectionTokenRequest : pb::IMessage<GetPendingConnectionTokenRequest> {
    private static readonly pb::MessageParser<GetPendingConnectionTokenRequest> _parser = new pb::MessageParser<GetPendingConnectionTokenRequest>(() => new GetPendingConnectionTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPendingConnectionTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenRequest(GetPendingConnectionTokenRequest other) : this() {
      clientToken_ = other.clientToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenRequest Clone() {
      return new GetPendingConnectionTokenRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPendingConnectionTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPendingConnectionTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPendingConnectionTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPendingConnectionTokenResponse : pb::IMessage<GetPendingConnectionTokenResponse> {
    private static readonly pb::MessageParser<GetPendingConnectionTokenResponse> _parser = new pb::MessageParser<GetPendingConnectionTokenResponse>(() => new GetPendingConnectionTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPendingConnectionTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenResponse(GetPendingConnectionTokenResponse other) : this() {
      error_ = other.error_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingConnectionTokenResponse Clone() {
      return new GetPendingConnectionTokenResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ErrorCode error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken.Parser);
    private readonly pbc::RepeatedField<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken> list_ = new pbc::RepeatedField<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ClientConnectionToken> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPendingConnectionTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPendingConnectionTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPendingConnectionTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Error = (global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetPendingConnectionTokenResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("InvalidClientToken")] InvalidClientToken = 1,
      }

      public sealed partial class ClientConnectionToken : pb::IMessage<ClientConnectionToken> {
        private static readonly pb::MessageParser<ClientConnectionToken> _parser = new pb::MessageParser<ClientConnectionToken>(() => new ClientConnectionToken());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientConnectionToken> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientConnectionToken() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientConnectionToken(ClientConnectionToken other) : this() {
          token_ = other.token_;
          userId_ = other.userId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientConnectionToken Clone() {
          return new ClientConnectionToken(this);
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 1;
        private string token_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Token {
          get { return token_; }
          set {
            token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 2;
        private ulong userId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UserId {
          get { return userId_; }
          set {
            userId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientConnectionToken);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientConnectionToken other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Token != other.Token) return false;
          if (UserId != other.UserId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Token.Length != 0) hash ^= Token.GetHashCode();
          if (UserId != 0UL) hash ^= UserId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Token.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Token);
          }
          if (UserId != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(UserId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Token.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
          }
          if (UserId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientConnectionToken other) {
          if (other == null) {
            return;
          }
          if (other.Token.Length != 0) {
            Token = other.Token;
          }
          if (other.UserId != 0UL) {
            UserId = other.UserId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Token = input.ReadString();
                break;
              }
              case 16: {
                UserId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AcknowledgeTokenRequest : pb::IMessage<AcknowledgeTokenRequest> {
    private static readonly pb::MessageParser<AcknowledgeTokenRequest> _parser = new pb::MessageParser<AcknowledgeTokenRequest>(() => new AcknowledgeTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcknowledgeTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenRequest(AcknowledgeTokenRequest other) : this() {
      clientToken_ = other.clientToken_;
      acknowledgedUserId_ = other.acknowledgedUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenRequest Clone() {
      return new AcknowledgeTokenRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acknowledged_user_id" field.</summary>
    public const int AcknowledgedUserIdFieldNumber = 2;
    private ulong acknowledgedUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AcknowledgedUserId {
      get { return acknowledgedUserId_; }
      set {
        acknowledgedUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcknowledgeTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcknowledgeTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (AcknowledgedUserId != other.AcknowledgedUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (AcknowledgedUserId != 0UL) hash ^= AcknowledgedUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (AcknowledgedUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AcknowledgedUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (AcknowledgedUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AcknowledgedUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcknowledgeTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.AcknowledgedUserId != 0UL) {
        AcknowledgedUserId = other.AcknowledgedUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 16: {
            AcknowledgedUserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcknowledgeTokenResponse : pb::IMessage<AcknowledgeTokenResponse> {
    private static readonly pb::MessageParser<AcknowledgeTokenResponse> _parser = new pb::MessageParser<AcknowledgeTokenResponse>(() => new AcknowledgeTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcknowledgeTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenResponse(AcknowledgeTokenResponse other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeTokenResponse Clone() {
      return new AcknowledgeTokenResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::P4TLB.MasterServer.AcknowledgeTokenResponse.Types.ErrorCode error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::P4TLB.MasterServer.AcknowledgeTokenResponse.Types.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcknowledgeTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcknowledgeTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcknowledgeTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Error = (global::P4TLB.MasterServer.AcknowledgeTokenResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AcknowledgeTokenResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("InvalidClientToken")] InvalidClientToken = 1,
      }

    }
    #endregion

  }

  public sealed partial class ServerInformation : pb::IMessage<ServerInformation> {
    private static readonly pb::MessageParser<ServerInformation> _parser = new pb::MessageParser<ServerInformation>(() => new ServerInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformation(ServerInformation other) : this() {
      serverUserId_ = other.serverUserId_;
      serverUserLogin_ = other.serverUserLogin_;
      name_ = other.name_;
      slotCount_ = other.slotCount_;
      slotLimit_ = other.slotLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformation Clone() {
      return new ServerInformation(this);
    }

    /// <summary>Field number for the "server_user_id" field.</summary>
    public const int ServerUserIdFieldNumber = 1;
    private ulong serverUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerUserId {
      get { return serverUserId_; }
      set {
        serverUserId_ = value;
      }
    }

    /// <summary>Field number for the "server_user_login" field.</summary>
    public const int ServerUserLoginFieldNumber = 2;
    private string serverUserLogin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUserLogin {
      get { return serverUserLogin_; }
      set {
        serverUserLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slot_count" field.</summary>
    public const int SlotCountFieldNumber = 4;
    private int slotCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotCount {
      get { return slotCount_; }
      set {
        slotCount_ = value;
      }
    }

    /// <summary>Field number for the "slot_limit" field.</summary>
    public const int SlotLimitFieldNumber = 5;
    private int slotLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotLimit {
      get { return slotLimit_; }
      set {
        slotLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerUserId != other.ServerUserId) return false;
      if (ServerUserLogin != other.ServerUserLogin) return false;
      if (Name != other.Name) return false;
      if (SlotCount != other.SlotCount) return false;
      if (SlotLimit != other.SlotLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerUserId != 0UL) hash ^= ServerUserId.GetHashCode();
      if (ServerUserLogin.Length != 0) hash ^= ServerUserLogin.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SlotCount != 0) hash ^= SlotCount.GetHashCode();
      if (SlotLimit != 0) hash ^= SlotLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerUserLogin);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (SlotCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlotCount);
      }
      if (SlotLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SlotLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUserLogin);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SlotCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotCount);
      }
      if (SlotLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInformation other) {
      if (other == null) {
        return;
      }
      if (other.ServerUserId != 0UL) {
        ServerUserId = other.ServerUserId;
      }
      if (other.ServerUserLogin.Length != 0) {
        ServerUserLogin = other.ServerUserLogin;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SlotCount != 0) {
        SlotCount = other.SlotCount;
      }
      if (other.SlotLimit != 0) {
        SlotLimit = other.SlotLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerUserId = input.ReadUInt64();
            break;
          }
          case 18: {
            ServerUserLogin = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            SlotCount = input.ReadInt32();
            break;
          }
          case 40: {
            SlotLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetServerInformationRequest : pb::IMessage<SetServerInformationRequest> {
    private static readonly pb::MessageParser<SetServerInformationRequest> _parser = new pb::MessageParser<SetServerInformationRequest>(() => new SetServerInformationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetServerInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationRequest(SetServerInformationRequest other) : this() {
      clientToken_ = other.clientToken_;
      name_ = other.name_;
      slotCount_ = other.slotCount_;
      slotLimit_ = other.slotLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationRequest Clone() {
      return new SetServerInformationRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slot_count" field.</summary>
    public const int SlotCountFieldNumber = 3;
    private int slotCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotCount {
      get { return slotCount_; }
      set {
        slotCount_ = value;
      }
    }

    /// <summary>Field number for the "slot_limit" field.</summary>
    public const int SlotLimitFieldNumber = 4;
    private int slotLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotLimit {
      get { return slotLimit_; }
      set {
        slotLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetServerInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetServerInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (Name != other.Name) return false;
      if (SlotCount != other.SlotCount) return false;
      if (SlotLimit != other.SlotLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SlotCount != 0) hash ^= SlotCount.GetHashCode();
      if (SlotLimit != 0) hash ^= SlotLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SlotCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SlotCount);
      }
      if (SlotLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlotLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SlotCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotCount);
      }
      if (SlotLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetServerInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SlotCount != 0) {
        SlotCount = other.SlotCount;
      }
      if (other.SlotLimit != 0) {
        SlotLimit = other.SlotLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            SlotCount = input.ReadInt32();
            break;
          }
          case 32: {
            SlotLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetServerInformationResponse : pb::IMessage<SetServerInformationResponse> {
    private static readonly pb::MessageParser<SetServerInformationResponse> _parser = new pb::MessageParser<SetServerInformationResponse>(() => new SetServerInformationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetServerInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationResponse(SetServerInformationResponse other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetServerInformationResponse Clone() {
      return new SetServerInformationResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::P4TLB.MasterServer.SetServerInformationResponse.Types.ErrorCode error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::P4TLB.MasterServer.SetServerInformationResponse.Types.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetServerInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetServerInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetServerInformationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Error = (global::P4TLB.MasterServer.SetServerInformationResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetServerInformationResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("InvalidClientToken")] InvalidClientToken = 1,
      }

    }
    #endregion

  }

  public sealed partial class ServerListRequest : pb::IMessage<ServerListRequest> {
    private static readonly pb::MessageParser<ServerListRequest> _parser = new pb::MessageParser<ServerListRequest>(() => new ServerListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest(ServerListRequest other) : this() {
      clientToken_ = other.clientToken_;
      queryString_ = other.queryString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest Clone() {
      return new ServerListRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    /// <summary>
    /// the client token could be useful to show private servers... (eg: friend server, tournament server)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_string" field.</summary>
    public const int QueryStringFieldNumber = 10;
    private string queryString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryString {
      get { return queryString_; }
      set {
        queryString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (QueryString != other.QueryString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (QueryString.Length != 0) hash ^= QueryString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (QueryString.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(QueryString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (QueryString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.QueryString.Length != 0) {
        QueryString = other.QueryString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 82: {
            QueryString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerListResponse : pb::IMessage<ServerListResponse> {
    private static readonly pb::MessageParser<ServerListResponse> _parser = new pb::MessageParser<ServerListResponse>(() => new ServerListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse(ServerListResponse other) : this() {
      servers_ = other.servers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse Clone() {
      return new ServerListResponse(this);
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::P4TLB.MasterServer.ServerInformation> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::P4TLB.MasterServer.ServerInformation.Parser);
    private readonly pbc::RepeatedField<global::P4TLB.MasterServer.ServerInformation> servers_ = new pbc::RepeatedField<global::P4TLB.MasterServer.ServerInformation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P4TLB.MasterServer.ServerInformation> Servers {
      get { return servers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servers_.Equals(other.servers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerListResponse other) {
      if (other == null) {
        return;
      }
      servers_.Add(other.servers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInformationRequest : pb::IMessage<ServerInformationRequest> {
    private static readonly pb::MessageParser<ServerInformationRequest> _parser = new pb::MessageParser<ServerInformationRequest>(() => new ServerInformationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationRequest(ServerInformationRequest other) : this() {
      clientToken_ = other.clientToken_;
      serverUserId_ = other.serverUserId_;
      serverUserLogin_ = other.serverUserLogin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationRequest Clone() {
      return new ServerInformationRequest(this);
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 1;
    private string clientToken_ = "";
    /// <summary>
    /// the client token could be useful to show private servers... (eg: friend server, tournament server)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_user_id" field.</summary>
    public const int ServerUserIdFieldNumber = 2;
    private ulong serverUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerUserId {
      get { return serverUserId_; }
      set {
        serverUserId_ = value;
      }
    }

    /// <summary>Field number for the "server_user_login" field.</summary>
    public const int ServerUserLoginFieldNumber = 3;
    private string serverUserLogin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUserLogin {
      get { return serverUserLogin_; }
      set {
        serverUserLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientToken != other.ClientToken) return false;
      if (ServerUserId != other.ServerUserId) return false;
      if (ServerUserLogin != other.ServerUserLogin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (ServerUserId != 0UL) hash ^= ServerUserId.GetHashCode();
      if (ServerUserLogin.Length != 0) hash ^= ServerUserLogin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientToken);
      }
      if (ServerUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerUserLogin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (ServerUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerUserId);
      }
      if (ServerUserLogin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUserLogin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.ServerUserId != 0UL) {
        ServerUserId = other.ServerUserId;
      }
      if (other.ServerUserLogin.Length != 0) {
        ServerUserLogin = other.ServerUserLogin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientToken = input.ReadString();
            break;
          }
          case 16: {
            ServerUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            ServerUserLogin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInformationResponse : pb::IMessage<ServerInformationResponse> {
    private static readonly pb::MessageParser<ServerInformationResponse> _parser = new pb::MessageParser<ServerInformationResponse>(() => new ServerInformationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationResponse(ServerInformationResponse other) : this() {
      information_ = other.information_ != null ? other.information_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInformationResponse Clone() {
      return new ServerInformationResponse(this);
    }

    /// <summary>Field number for the "information" field.</summary>
    public const int InformationFieldNumber = 1;
    private global::P4TLB.MasterServer.ServerInformation information_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::P4TLB.MasterServer.ServerInformation Information {
      get { return information_; }
      set {
        information_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Information, other.Information)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (information_ != null) hash ^= Information.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (information_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Information);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (information_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Information);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInformationResponse other) {
      if (other == null) {
        return;
      }
      if (other.information_ != null) {
        if (information_ == null) {
          Information = new global::P4TLB.MasterServer.ServerInformation();
        }
        Information.MergeFrom(other.Information);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (information_ == null) {
              Information = new global::P4TLB.MasterServer.ServerInformation();
            }
            input.ReadMessage(Information);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
