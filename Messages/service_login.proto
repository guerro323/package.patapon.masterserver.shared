syntax = "proto3";

package P4TLB.MasterServer;

service AuthenticationService
{
    rpc UserLogin (UserLoginRequest) returns (UserLoginResponse);
    rpc UserSignUp (UserSignUpRequest) returns (UserSignUpResponse); //< will not be enabled for now
    rpc Disconnect (DisconnectRequest) returns (DisconnectReply);
    rpc GetUserLogin (GetUserLoginRequest) returns (GetUserLoginResponse);
}

message UserLoginRequest {
    enum RequestType {
        Player = 0;
        Server = 1;
    }

    string login = 1;
    string password = 2; //< need to be hashed before being sent...
    string routeData = 3; // used for discord connection (or other routing services)...

    RequestType type = 32;
}

message UserLoginResponse {
    enum ErrorCode {
        Success = 0;
        Invalid = 1;
        AlreadyConnected = 2;
        ConnectionAlreadyPending = 3;
    }

    /* Error codes:
     * 0 -> success
     * 1 -> invalid (we can't say if the password was incorrect or username was incorrect: security reason)
     */
    ErrorCode error = 1;
    string token = 2;
    int32 clientId = 3;
    uint64 userId = 4;
}

/* For the password part, we will use generated token from a homemade discord bot */
message UserSignUpRequest {
    string login = 1;
    string password = 2; //< need to be hashed before being sent...
}

message UserSignUpResponse {
    enum ErrorCode {
        Success = 0;
        Invalid = 1;
    }

    ErrorCode error = 1;
}

message DisconnectRequest {
    string token = 1;
    string reason = 2;
}

message DisconnectReply {
}

message GetUserLoginRequest {
    uint64 user_id = 1;
}

message GetUserLoginResponse {
    string user_login = 1;
}