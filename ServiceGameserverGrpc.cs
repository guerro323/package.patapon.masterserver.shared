// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Messages/service_gameserver.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace P4TLB.MasterServer {
  public static partial class GameServerService
  {
    static readonly string __ServiceName = "P4TLB.MasterServer.GameServerService";

    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ConnectionTokenRequest> __Marshaller_P4TLB_MasterServer_ConnectionTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ConnectionTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ConnectionTokenResponse> __Marshaller_P4TLB_MasterServer_ConnectionTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ConnectionTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ConnectionRequest> __Marshaller_P4TLB_MasterServer_ConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ConnectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ConnectionResponse> __Marshaller_P4TLB_MasterServer_ConnectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ConnectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.GetPendingConnectionTokenRequest> __Marshaller_P4TLB_MasterServer_GetPendingConnectionTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.GetPendingConnectionTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse> __Marshaller_P4TLB_MasterServer_GetPendingConnectionTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.GetPendingConnectionTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.AcknowledgeTokenRequest> __Marshaller_P4TLB_MasterServer_AcknowledgeTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.AcknowledgeTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.AcknowledgeTokenResponse> __Marshaller_P4TLB_MasterServer_AcknowledgeTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.AcknowledgeTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.SetServerInformationRequest> __Marshaller_P4TLB_MasterServer_SetServerInformationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.SetServerInformationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.SetServerInformationResponse> __Marshaller_P4TLB_MasterServer_SetServerInformationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.SetServerInformationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ServerListRequest> __Marshaller_P4TLB_MasterServer_ServerListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ServerListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ServerListResponse> __Marshaller_P4TLB_MasterServer_ServerListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ServerListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ServerInformationRequest> __Marshaller_P4TLB_MasterServer_ServerInformationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ServerInformationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::P4TLB.MasterServer.ServerInformationResponse> __Marshaller_P4TLB_MasterServer_ServerInformationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::P4TLB.MasterServer.ServerInformationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::P4TLB.MasterServer.ConnectionTokenRequest, global::P4TLB.MasterServer.ConnectionTokenResponse> __Method_GetConnectionToken = new grpc::Method<global::P4TLB.MasterServer.ConnectionTokenRequest, global::P4TLB.MasterServer.ConnectionTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectionToken",
        __Marshaller_P4TLB_MasterServer_ConnectionTokenRequest,
        __Marshaller_P4TLB_MasterServer_ConnectionTokenResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.ConnectionRequest, global::P4TLB.MasterServer.ConnectionResponse> __Method_TryConnect = new grpc::Method<global::P4TLB.MasterServer.ConnectionRequest, global::P4TLB.MasterServer.ConnectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TryConnect",
        __Marshaller_P4TLB_MasterServer_ConnectionRequest,
        __Marshaller_P4TLB_MasterServer_ConnectionResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.GetPendingConnectionTokenRequest, global::P4TLB.MasterServer.GetPendingConnectionTokenResponse> __Method_GetPendingConnectionTokens = new grpc::Method<global::P4TLB.MasterServer.GetPendingConnectionTokenRequest, global::P4TLB.MasterServer.GetPendingConnectionTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPendingConnectionTokens",
        __Marshaller_P4TLB_MasterServer_GetPendingConnectionTokenRequest,
        __Marshaller_P4TLB_MasterServer_GetPendingConnectionTokenResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.AcknowledgeTokenRequest, global::P4TLB.MasterServer.AcknowledgeTokenResponse> __Method_AcknowledgeToken = new grpc::Method<global::P4TLB.MasterServer.AcknowledgeTokenRequest, global::P4TLB.MasterServer.AcknowledgeTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcknowledgeToken",
        __Marshaller_P4TLB_MasterServer_AcknowledgeTokenRequest,
        __Marshaller_P4TLB_MasterServer_AcknowledgeTokenResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.SetServerInformationRequest, global::P4TLB.MasterServer.SetServerInformationResponse> __Method_UpdateServerInformation = new grpc::Method<global::P4TLB.MasterServer.SetServerInformationRequest, global::P4TLB.MasterServer.SetServerInformationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServerInformation",
        __Marshaller_P4TLB_MasterServer_SetServerInformationRequest,
        __Marshaller_P4TLB_MasterServer_SetServerInformationResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.ServerListRequest, global::P4TLB.MasterServer.ServerListResponse> __Method_GetServerList = new grpc::Method<global::P4TLB.MasterServer.ServerListRequest, global::P4TLB.MasterServer.ServerListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServerList",
        __Marshaller_P4TLB_MasterServer_ServerListRequest,
        __Marshaller_P4TLB_MasterServer_ServerListResponse);

    static readonly grpc::Method<global::P4TLB.MasterServer.ServerInformationRequest, global::P4TLB.MasterServer.ServerInformationResponse> __Method_GetServerInformation = new grpc::Method<global::P4TLB.MasterServer.ServerInformationRequest, global::P4TLB.MasterServer.ServerInformationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServerInformation",
        __Marshaller_P4TLB_MasterServer_ServerInformationRequest,
        __Marshaller_P4TLB_MasterServer_ServerInformationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::P4TLB.MasterServer.ServiceGameserverReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameServerService</summary>
    [grpc::BindServiceMethod(typeof(GameServerService), "BindService")]
    public abstract partial class GameServerServiceBase
    {
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.ConnectionTokenResponse> GetConnectionToken(global::P4TLB.MasterServer.ConnectionTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.ConnectionResponse> TryConnect(global::P4TLB.MasterServer.ConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse> GetPendingConnectionTokens(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.AcknowledgeTokenResponse> AcknowledgeToken(global::P4TLB.MasterServer.AcknowledgeTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.SetServerInformationResponse> UpdateServerInformation(global::P4TLB.MasterServer.SetServerInformationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Both
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.ServerListResponse> GetServerList(global::P4TLB.MasterServer.ServerListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::P4TLB.MasterServer.ServerInformationResponse> GetServerInformation(global::P4TLB.MasterServer.ServerInformationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameServerService</summary>
    public partial class GameServerServiceClient : grpc::ClientBase<GameServerServiceClient>
    {
      /// <summary>Creates a new client for GameServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameServerServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ConnectionTokenResponse GetConnectionToken(global::P4TLB.MasterServer.ConnectionTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ConnectionTokenResponse GetConnectionToken(global::P4TLB.MasterServer.ConnectionTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectionToken, null, options, request);
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ConnectionTokenResponse> GetConnectionTokenAsync(global::P4TLB.MasterServer.ConnectionTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ConnectionTokenResponse> GetConnectionTokenAsync(global::P4TLB.MasterServer.ConnectionTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectionToken, null, options, request);
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ConnectionResponse TryConnect(global::P4TLB.MasterServer.ConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryConnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ConnectionResponse TryConnect(global::P4TLB.MasterServer.ConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TryConnect, null, options, request);
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ConnectionResponse> TryConnectAsync(global::P4TLB.MasterServer.ConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ConnectionResponse> TryConnectAsync(global::P4TLB.MasterServer.ConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TryConnect, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.GetPendingConnectionTokenResponse GetPendingConnectionTokens(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPendingConnectionTokens(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.GetPendingConnectionTokenResponse GetPendingConnectionTokens(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPendingConnectionTokens, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse> GetPendingConnectionTokensAsync(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPendingConnectionTokensAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.GetPendingConnectionTokenResponse> GetPendingConnectionTokensAsync(global::P4TLB.MasterServer.GetPendingConnectionTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPendingConnectionTokens, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.AcknowledgeTokenResponse AcknowledgeToken(global::P4TLB.MasterServer.AcknowledgeTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.AcknowledgeTokenResponse AcknowledgeToken(global::P4TLB.MasterServer.AcknowledgeTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcknowledgeToken, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.AcknowledgeTokenResponse> AcknowledgeTokenAsync(global::P4TLB.MasterServer.AcknowledgeTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.AcknowledgeTokenResponse> AcknowledgeTokenAsync(global::P4TLB.MasterServer.AcknowledgeTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcknowledgeToken, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.SetServerInformationResponse UpdateServerInformation(global::P4TLB.MasterServer.SetServerInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServerInformation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.SetServerInformationResponse UpdateServerInformation(global::P4TLB.MasterServer.SetServerInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServerInformation, null, options, request);
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.SetServerInformationResponse> UpdateServerInformationAsync(global::P4TLB.MasterServer.SetServerInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServerInformationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.SetServerInformationResponse> UpdateServerInformationAsync(global::P4TLB.MasterServer.SetServerInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServerInformation, null, options, request);
      }
      /// <summary>
      /// Both
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ServerListResponse GetServerList(global::P4TLB.MasterServer.ServerListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Both
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::P4TLB.MasterServer.ServerListResponse GetServerList(global::P4TLB.MasterServer.ServerListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServerList, null, options, request);
      }
      /// <summary>
      /// Both
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ServerListResponse> GetServerListAsync(global::P4TLB.MasterServer.ServerListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Both
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ServerListResponse> GetServerListAsync(global::P4TLB.MasterServer.ServerListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServerList, null, options, request);
      }
      public virtual global::P4TLB.MasterServer.ServerInformationResponse GetServerInformation(global::P4TLB.MasterServer.ServerInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServerInformation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::P4TLB.MasterServer.ServerInformationResponse GetServerInformation(global::P4TLB.MasterServer.ServerInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServerInformation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ServerInformationResponse> GetServerInformationAsync(global::P4TLB.MasterServer.ServerInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServerInformationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::P4TLB.MasterServer.ServerInformationResponse> GetServerInformationAsync(global::P4TLB.MasterServer.ServerInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServerInformation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetConnectionToken, serviceImpl.GetConnectionToken)
          .AddMethod(__Method_TryConnect, serviceImpl.TryConnect)
          .AddMethod(__Method_GetPendingConnectionTokens, serviceImpl.GetPendingConnectionTokens)
          .AddMethod(__Method_AcknowledgeToken, serviceImpl.AcknowledgeToken)
          .AddMethod(__Method_UpdateServerInformation, serviceImpl.UpdateServerInformation)
          .AddMethod(__Method_GetServerList, serviceImpl.GetServerList)
          .AddMethod(__Method_GetServerInformation, serviceImpl.GetServerInformation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GameServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetConnectionToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.ConnectionTokenRequest, global::P4TLB.MasterServer.ConnectionTokenResponse>(serviceImpl.GetConnectionToken));
      serviceBinder.AddMethod(__Method_TryConnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.ConnectionRequest, global::P4TLB.MasterServer.ConnectionResponse>(serviceImpl.TryConnect));
      serviceBinder.AddMethod(__Method_GetPendingConnectionTokens, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.GetPendingConnectionTokenRequest, global::P4TLB.MasterServer.GetPendingConnectionTokenResponse>(serviceImpl.GetPendingConnectionTokens));
      serviceBinder.AddMethod(__Method_AcknowledgeToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.AcknowledgeTokenRequest, global::P4TLB.MasterServer.AcknowledgeTokenResponse>(serviceImpl.AcknowledgeToken));
      serviceBinder.AddMethod(__Method_UpdateServerInformation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.SetServerInformationRequest, global::P4TLB.MasterServer.SetServerInformationResponse>(serviceImpl.UpdateServerInformation));
      serviceBinder.AddMethod(__Method_GetServerList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.ServerListRequest, global::P4TLB.MasterServer.ServerListResponse>(serviceImpl.GetServerList));
      serviceBinder.AddMethod(__Method_GetServerInformation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::P4TLB.MasterServer.ServerInformationRequest, global::P4TLB.MasterServer.ServerInformationResponse>(serviceImpl.GetServerInformation));
    }

  }
}
#endregion
